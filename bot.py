from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)

BOT_TOKEN = '...'
CHANNEL_ID = ...

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_states = {}

# –°—Ç–∞–Ω–∏
STATE_NONE = "none"
STATE_MESSAGE = "message"
STATE_COMPLAINT = "complaint"
STATE_IDEA = "idea"

# /start ‚Äî –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì© –ê–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data='message')],
        [InlineKeyboardButton("‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ —Å–∫–∞—Ä–≥—É", callback_data='complaint')],
        [InlineKeyboardButton("üí° –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–¥–µ—é", callback_data='idea')],
        [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == 'message':
        user_states[user_id] = STATE_MESSAGE
        await query.message.reply_text("üì© –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    elif query.data == 'complaint':
        user_states[user_id] = STATE_COMPLAINT
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É —Å–∫–∞—Ä–≥—É.")
    elif query.data == 'idea':
        user_states[user_id] = STATE_IDEA
        await query.message.reply_text("üí° –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É —ñ–¥–µ—é.")
    else:
        user_states[user_id] = STATE_NONE
        await query.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    if message.chat.type != "private":
        return

    user_id = message.from_user.id
    state = user_states.get(user_id, STATE_NONE)

    if state == STATE_NONE:
        await message.reply_text("‚ÑπÔ∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: /start")
        return

    # –ü—Ä–µ—Ñ—ñ–∫—Å–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
    prefix = "üì¢ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:"
    if state == STATE_MESSAGE:
        prefix = "üì© –ê–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:"
    elif state == STATE_COMPLAINT:
        prefix = "‚úçÔ∏è –ê–Ω–æ–Ω—ñ–º–Ω–∞ —Å–∫–∞—Ä–≥–∞:"
    elif state == STATE_IDEA:
        prefix = "üí° –ê–Ω–æ–Ω—ñ–º–Ω–∞ —ñ–¥–µ—è:"

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —É –∫–∞–Ω–∞–ª
    if message.text:
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=f"{prefix}\n\n{message.text}"
        )
    elif message.photo:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=message.photo[-1].file_id,
            caption=message.caption or prefix
        )
    elif message.document:
        await context.bot.send_document(
            chat_id=CHANNEL_ID,
            document=message.document.file_id,
            caption=message.caption or prefix
        )
    else:
        await message.reply_text("‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    # –ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_states[user_id] = STATE_NONE
    await message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ. –î—è–∫—É—î–º–æ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

app.run_polling()
